name: TestCI

on: [push, pull_request]

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          #- iOS # Build an iOS player.
          #- Android # Build an Android .apk standalone app.
          - WebGL # WebGL.
    steps:
    
    
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true
      
      
      #Write correct define for server params  
      #- name: Write File
      #  uses: DamianReeves/write-file-action@v1.0
      #  with:
      #    path: Assets/csc.rsp
      #    contents: |
      #      -define:LOCAL
      #    write-mode: overwrite
          
      #- name: print file
      #  uses: pCYSl5EDgo/cat@master
      #  id: hello
      #  with:
      #    path: Assets/csc.rsp


      #- run: echo $TEXT
      #  env:
      #    TEXT: ${{ steps.hello.outputs.text }}
      
      
      ## Cache    
      #- uses: actions/cache@v2
      #  with:
      #    path: Library
      #    key: Library-${{ matrix.targetPlatform }}
      #    restore-keys: Library-
          
     
      - name: Build name WebGL
        if: ${{ matrix.targetPlatform == 'WebGL'}} 
        run: echo "BUILD_NAME=webglbuild" >> $GITHUB_ENV 
        
      - name: Build name Android
        if: ${{ matrix.targetPlatform == 'Android'}} 
        run: echo "BUILD_NAME=Androidbuild" >> $GITHUB_ENV 
        
      - name: Build name iOS
        if: ${{ matrix.targetPlatform == 'iOS'}} 
        run: echo "BUILD_NAME=iOSbuild" >> $GITHUB_ENV 
       
    
    
      # Build 
      #- name: Build project   
      #  uses: game-ci/unity-builder@v2
      #  env:
      #    UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      #    UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      #    UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
      #  with:
      #    targetPlatform: ${{ matrix.targetPlatform }}
      #    buildName: ${{ env.BUILD_NAME }} #'webglbuild'
      #    allowDirtyBuild: true   
      - uses: actions/checkout@v1

      - run: echo hello > world.txt

      - uses: actions/upload-artifact@v1
        with:
            name: my-artifact
            path: world.txt
          
      #Upload artifacts    
      #- uses: actions/upload-artifact@v2
      #  with:
      #    name: ${{ env.BUILD_NAME }} #Build-${{ matrix.targetPlatform }}
      #    path: build/${{ matrix.targetPlatform }}
          
      # Show the structure of folder
      - name: Display structure of downloaded files
        run: ls -R
        #working-directory: build/iOS
            
          
      # Return License
      #- name: Return license
      #  uses: game-ci/unity-return-license@v2
      #  if: always()
        
  deployToServer:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: buildForAllSupportedPlatforms
    steps:
    
      # Download artifacts    
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: build/WebGL
          
      ## Upload to AWS     
      #- uses: shallwefootball/s3-upload-action@master 
      #  name: Upload S3
      #  id: S3
      #  with:
      #    aws_key_id: ${{ secrets.AWS_KEY_ID }}
      #    aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      #    aws_bucket: ${{ secrets.AWS_BUCKET }}
      #    source_dir: 'build/WebGL/webglbuild'
      #    destination_dir : 'localside/webglbuild/'
          
          
      ## Prepare config for clear cache
      #- name: Configure AWS credentials
      #  uses: aws-actions/configure-aws-credentials@v1
      #  with:
      #    aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
      #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    aws-region: us-east-2
          
          
      ## Reset AWS S3 cache
      #- name: Create CloudFront invalidation
      #  uses: josemando/aws-cloudfront-create-invalidation@v1
      #  with:
      #    distribution-id: ${{secrets.TEST_DISTRIBUTION_ID}}
      #    paths: /*
          
  cleanWebGLArtifacts:
    name: Clean WebGL Artifacts
    runs-on: ubuntu-latest
    needs: deployToServer
    steps:
    # Checkout
      #- name: Checkout repository
      #  uses: actions/checkout@v2
      #  with:
      #    lfs: true
    # Download artifacts    
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: build/WebGL
    # Show the structure of folder
      - name: Display structure of downloaded files
        run: ls -R
        
      # delete-artifact
      - uses: geekyeggo/delete-artifact@v1
        with: 
          name: my-artifact